[{"section":"Blog","slug":"/en/blog/typora-custom-command-to-upload-images-to-loulan-image-hosting/","title":"Typora+Cursor 自定义命令行上传图片到楼兰图床","description":"Typora+Cursor 自定义命令行上传图片到楼兰图床","date":"January 2, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://img.tunan.net/20250103130423936.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"\"\n    width=\"420\" /\u003e\n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://img.tunan.net/20250103130423936.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"100\"\n    width=\"100\" /\u003e\n","searchKeyword":"","categories":"Cursor","tags":"Typora, Cursor","content":"本来一直用 Typora 写点东西，但是有一个痛点，就是图片的存储，存在本地，在想发布到网上时，还需要手动修改图片的链接地址，容易遗漏，造成重复工作。\n我本身一直用 nas 存储我的一些资料，通过动态域名解析来实现外网直接访问。后来试了试通过 nas 配置楼兰图床，客户端通过 picgo 配置实现图片上传到图床，然后在 Typora 中进行引用。但是 picgo 在使用时， 如果本地有科学上网代理，会造成 picgo 无法上传图片。虽然可以通过修改代理地址的方式实现，但是也挺麻烦。\n最近试了试 Cursor，结果很满意，几句话就帮我用 shell 写出了一个命令行工具，轻松实现在 Typora 写东西的时候，图片自动上传到 nas 楼兰图床。\nCursor生成的代码 其中LSKY_URL 填写你的 API 地址，TOKEN 填写你的 TOKEN，具体如何找 TOKEN，网上有很多介绍，在这里就不多说。\n复制下面的代码，保存为 sh 文件即可。\n#!/bin/bash upload_to_lsky.sh # 配置信息 LSKY_URL=\u0026#34;https://yourdomain:port/api/v1/upload\u0026#34; # 兰空图床API地址 TOKEN=\u0026#34;yourtoken\u0026#34; # API token # 检查是否传入了图片参数 if [ $# -eq 0 ]; then echo \u0026#34;Error: No image file specified\u0026#34; exit 1 fi # 处理上传结果的函数 handle_upload() { local image_path=\u0026#34;$1\u0026#34; # 检查文件是否存在 if [ ! -f \u0026#34;$image_path\u0026#34; ]; then echo \u0026#34;Error: File not found - $image_path\u0026#34; return 1 fi # 使用 curl 上传图片 response=$(curl -s -X POST \\ -H \u0026#34;Authorization: Bearer $TOKEN\u0026#34; \\ -H \u0026#34;Accept: application/json\u0026#34; \\ -F \u0026#34;file=@$image_path\u0026#34; \\ \u0026#34;$LSKY_URL\u0026#34;) # 检查是否上传成功 if echo \u0026#34;$response\u0026#34; | grep -q \u0026#39;\u0026#34;status\u0026#34;:true\u0026#39;; then # 从响应中提取图片URL并去除转义字符 image_url=$(echo \u0026#34;$response\u0026#34; | grep -o \u0026#39;\u0026#34;url\u0026#34;:\u0026#34;[^\u0026#34;]*\u0026#34;\u0026#39; | cut -d\u0026#39;\u0026#34;\u0026#39; -f4 | sed \u0026#39;s/\\\\\\//\\//g\u0026#39;) echo \u0026#34;$image_url\u0026#34; return 0 else echo \u0026#34;Error: Upload failed - $response\u0026#34; return 1 fi } # 存储上传成功的URL success_urls=() # 存储失败的文件 failed_files=() # 处理所有传入的图片 for image in \u0026#34;$@\u0026#34;; do result=$(handle_upload \u0026#34;$image\u0026#34;) if [ $? -eq 0 ]; then success_urls+=(\u0026#34;$result\u0026#34;) else failed_files+=(\u0026#34;$image\u0026#34;) fi done # 输出结果（Typora要求的格式） if [ ${#success_urls[@]} -gt 0 ]; then echo \u0026#34;Upload Success:\u0026#34; printf \u0026#34;%s\\n\u0026#34; \u0026#34;${success_urls[@]}\u0026#34; fi # 如果有失败的文件，输出错误信息 if [ ${#failed_files[@]} -gt 0 ]; then echo \u0026#34;Upload Failed:\u0026#34; printf \u0026#34;%s\\n\u0026#34; \u0026#34;${failed_files[@]}\u0026#34; exit 1 fi 修改sh文件权限 chmod +x upload_to_lsky.sh Typora配置 "},{"section":"Blog","slug":"/en/blog/large-model-token-key-points/","title":"大模型Token 要点","description":"大模型Token 要点","date":"January 2, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://img.tunan.net/20250103114916749.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"\"\n    width=\"420\" /\u003e\n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://img.tunan.net/20250103114916749.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"100\"\n    width=\"100\" /\u003e\n","searchKeyword":"","categories":"大模型","tags":"大模型, token","content":"什么是 Token？ 最小单位 Token 就是语言模型理解的最小单位，比如一个字、一个词，或者一个符号。\n怎么用？ 模型通过“文字接龙”来预测下一个 Token 出现的可能性，回答问题或者补全句子。\n随机性 由于每次预测都有概率，问同样的问题，可能每次回答都不一样。\n为什么重要？ 每个模型有自己的 Token 规则，不同语言或者不同模型的 Token 定义可能不一样。最终 Token 会被转成数字，让模型处理。\nToken 限制 长度限制 每次对话的输入+输出不能超过 Token 限制，比如 4096 个。\n上下文窗口 模型“记住”信息的最大 Token 数。超过了，前面的信息会被遗忘。\n打个比方：\n•\t上下文窗口像聊天的“记忆容量”。\n•\tToken 长度像你每次说话的“嘴巴大小”。\n产品设计里的 “惊喜” 和 “惊吓” 惊吓：Token = 钱 每用一个 Token 都要成本，尤其是频繁调用模型的时候，这个成本可能超乎想象。\n举个例子：\n如果你的产品是个模拟练习工具，用户练一次可能要调用几千个 Token。成本如果没算清楚，最后可能赔钱。\n惊吓：体验拖后腿 提示词太复杂，模型生成太慢，用户可能不愿意等，直接弃用产品。\n举个例子：\n模拟练习的 NPC 响应超精准，但每次都得等 10 秒，用户可能连体验的耐心都没了。\n惊喜：换个模型就能搞定问题 如果功能因为 Token 限制发挥不好，试试换个上下文窗口大的模型。\n举个例子：\n想用 AI 做知识库问答，但知识库太大导致准确率低，换个 Token 容量大的模型，准确率就飙升。\nToken 是大语言模型的“油”，用多少、怎么用、有什么限制，都直接影响产品性能、成本和用户体验。设计产品时，别忘了：\n•\t估算 Token 成本，别赔本赚吆喝。\n•\t平衡精确性和用户响应时间。\n•\t碰到限制，试试换个模型搞定。\n用好了 Token，能让你的 AI 产品又智能又赚钱！\n"},{"section":"Blog","slug":"/en/blog/a-personal-blog-using-hugo-tencent-cloud-and-mac/","title":"使用腾讯云和 mac 搭建个人博客","description":"this is meta description","date":"January 1, 2025","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://img.tunan.net/20250103114646929.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"\"\n    width=\"420\" /\u003e\n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u003cimg\n    loading=\"\"\n    decoding=\"async\"\n    src=\"https://img.tunan.net/20250103114646929.png\"\n    alt=\"\"\n    class=\" img\"\n    height=\"100\"\n    width=\"100\" /\u003e\n","searchKeyword":"","categories":"Hugo","tags":"hugo, 腾讯云, hugoplate","content":"一直以来想自己做个博客，慢慢的做一些自媒体的东西，但是一直也没有下决心，除了自身懒惰之外，很多也是觉得自己能力不够，但事情总得开始，希望就从 hugo+hugoplate 开始。\n为什么会选择 hugo 其实没有什么很特别的原因，更多的是因为 wordpress 不适合我。wordpress 太折腾，我也买了收费主题，但是光一个 elementor 插件就折腾我半天，效率太低了。\n很多人因为 hugo 的静态特点，考虑访问速度选择了 hugo，但是我觉得就个人博客而言，能有多少内容。并且因为我手上有个 2u8g 的腾讯云轻量服务器，当时便宜买了 5 年，闲着也是闲着。\n对于主题，我个人还是希望能够好看，暂时先选了 hugoplate。\n期望的效果 简单来说，我希望可以用我的 mac 电脑编写博客，通过腾讯云发布，那我们就开始！\n安装过程 Mac端 安装 Homebrew 网址\nhttps://brew.sh/zh-cn/\n安装 Homebrew\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; brew update 设置环境变量 以前每个新用户的默认 shell 是/bin/bash，那么这里我们需要配置文件为~/.bash_profile，从macOS Catalina(10.15.x) 版开始，Mac 使用/bin/zsh作为默认 Shell ，其对应的配置文件为~/.zshrc\nARM-zsh echo \u0026#39;eval \u0026#34;$(/opt/homebrew/bin/brew shellenv)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zprofile eval \u0026#34;$(/opt/homebrew/bin/brew shellenv)\u0026#34; ARM-bash echo \u0026#39;eval \u0026#34;$(/opt/homebrew/bin/brew shellenv)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile eval \u0026#34;$(/opt/homebrew/bin/brew shellenv)\u0026#34; Intel-zsh echo \u0026#39;eval \u0026#34;$(/usr/local/Homebrew/bin/brew shellenv)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zprofile eval \u0026#34;$(/usr/local/Homebrew/bin/brew shellenv)\u0026#34; Intel-bash echo \u0026#39;eval \u0026#34;$(/usr/local/Homebrew/bin/brew shellenv)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile eval \u0026#34;$(/usr/local/Homebrew/bin/brew shellenv)\u0026#34; 安装 Git、Go、Dart Sass、node.js 1、安装 Git\n默认mac 下是安装 Git 的，但我们还是安装最新版 Git\nbrew 安装 brew install git 验证是否安装成功 git --version 2、安装 Go\nbrew 安装 brew install go 验证是否安装成功 go version 配置 Go 环境变量（可选） echo \u0026#39;export GOPATH=$HOME/go\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;export PATH=$PATH:$GOPATH/bin\u0026#39; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc 3、安装 Dart Sass\nDart Sass 是 Sass 的官方实现，用于将 SCSS/Sass 文件转译为 CSS。\nbrew 安装 brew install dart-sdk 装完 dart-sdk 后，需要使用 Dart 包管理器（pub）全局安装 Sass。 dart pub global activate sass 将 Dart pub 全局路径添加到你的 PATH 变量中。对于 zsh，将以下内容添加到你的 ~/.zshrc 中。 export PATH=\u0026#34;$PATH\u0026#34;:\u0026#34;$HOME/.pub-cache/bin\u0026#34; 验证安装 sass --version 4、安装 node.js\n安装nvm bash -c \u0026#34;$(curl -fsSL https://gitee.com/RubyMetric/nvm-cn/raw/main/install.sh)\u0026#34; 环境变量 source ~/.nvm/nvm.sh 验证是否安装成功 nvm -v 安装 node.js（最新的长期支持版本） nvm install 22.12.0 安装 Hugo brew 安装 brew install hugo 验证是否安装成功 hugo version 如果显示类似 Hugo Static Site Generator vX.X.X/extended 的信息，表示安装成功。\n安装主题 hugoplate 参考官方这个视频，很简单\n腾讯云配置 其实对于云端的配置，有两种方案，一是在服务器上安装 Nginx做代理即可，对于这种方式网上一大堆资料，在这里不再赘述，这种方案对于小白比较麻烦；另一种方案，安装宝塔面板，直接在面板配置，全是图形化界面，用起来很方便。\n创建 HTML站点，用自己的域名解析 添加 SSL 证书，宝塔有免费的证书，也可以用自己的证书 上传博客网站 在编辑器终端运行 npm run build ，对网站进行编译 valen@Valens-mn www % npm run build \u0026gt; hugoplate@1.18.1 build \u0026gt; hugo --gc --minify --templateMetrics --templateMetricsHints --forceSyncStatic Start building sites … hugo v0.140.1+extended+withdeploy darwin/arm64 BuildDate=2024-12-23T16:26:35Z VendorInfo=brew Template Metrics: cumulative average maximum cache percent cached total duration duration duration potential cached count count template ---------- -------- -------- --------- ------- ------ ----- -------- 169.473789ms 4.345481ms 16.469958ms 100 95 37 39 partials/essentials/script.html 91.493834ms 15.248972ms 33.502417ms 0 0 0 6 authors/single.html 84.703914ms 2.171895ms 21.746042ms 76 0 0 39 partials/essentials/head.html 69.761041ms 1.788744ms 21.646417ms 69 0 0 39 partials/basic-seo.html 58.419879ms 1.497945ms 8.418541ms 100 95 37 39 partials/essentials/style.html 54.059292ms 6.757411ms 29.563125ms 0 0 0 8 _default/taxonomy.html 42.5595ms 21.27975ms 23.443292ms 0 0 0 2 blog/list.html 41.426ms 10.3565ms 22.420958ms 0 0 0 4 _default/single.html 38.645458ms 3.864545ms 17.1685ms 95 0 0 10 partials/components/blog-card.html 36.835541ms 18.41777ms 22.6095ms 0 0 0 2 blog/single.html 32.014837ms 820.893µs 2.999875ms 98 0 0 39 partials/essentials/header.html 31.452834ms 15.726417ms 30.423334ms 0 0 0 2 about/list.html 30.729708ms 15.364854ms 28.335291ms 0 0 0 2 index.html 29.956042ms 7.48901ms 26.462875ms 0 0 0 4 _default/terms.html 25.765625ms 12.882812ms 24.740333ms 0 0 0 2 contact/list.html 23.2775ms 11.63875ms 21.573416ms 0 0 0 2 authors/list.html 22.772541ms 5.693135ms 19.492875ms 0 0 0 4 _default/list.html 22.198957ms 284.602µs 1.406542ms 100 0 0 78 partials/logo.html 15.132916ms 540.461µs 2.947917ms 38 0 0 28 partials/image.html 9.211539ms 236.193µs 934.375µs 99 0 0 39 partials/essentials/footer.html 8.697292ms 4.348646ms 8.248375ms 0 0 0 2 shortcodes/gallery.html 7.324834ms 305.201µs 1.46775ms 100 0 0 24 partials/image-pipe.html 4.19258ms 113.312µs 2.475875ms 100 100 37 37 partials/favicon 2.998792ms 1.499396ms 2.52175ms 0 0 0 2 _default/list.searchindex.json 2.548291ms 637.072µs 1.339166ms 81 0 0 4 partials/searchImage.html 2.3755ms 1.18775ms 2.290583ms 0 0 0 2 partials/favicon.html 2.348334ms 90.32µs 397.583µs 0 0 0 26 _internal/_default/rss.xml 2.303332ms 88.589µs 226µs 80 0 0 26 partials/page-header.html 1.962421ms 50.318µs 189.25µs 86 0 0 39 partials/components/language-switcher.html 1.643374ms 42.137µs 142.541µs 75 0 0 39 partials/search-index.html 1.450292ms 241.715µs 656.625µs 97 0 0 6 partials/components/author-card.html 1.433833ms 716.916µs 1.395ms 0 0 0 2 _default/index.webmanifest 1.269918ms 32.562µs 105.208µs 77 0 0 39 partials/search-modal.html 1.130581ms 43.483µs 139.833µs 77 0 0 26 partials/components/breadcrumb.html 995.5µs 995.5µs 995.5µs 0 0 0 1 404.en.html 992.623µs 25.451µs 347.042µs 100 95 37 39 partials/site-verifications.html 894.542µs 447.271µs 753.917µs 0 0 0 2 shortcodes/image.html 858.292µs 429.146µs 475.167µs 0 0 0 2 partials/widgets/widget-wrapper.html 847.837µs 21.739µs 150.875µs 100 0 0 39 partials/components/theme-switcher.html 804.793µs 402.396µs 457.959µs 0 0 0 2 shortcodes/slider.html 723.168µs 12.687µs 150.292µs 0 0 0 57 _default/_markup/render-link.html 641.042µs 320.521µs 405.5µs 0 0 0 2 _internal/_default/sitemap.xml 509.161µs 13.055µs 77.291µs 100 95 37 39 partials/preloader.html 506.586µs 12.989µs 231.792µs 94 0 0 39 partials/mermaid/assets/js.html 374.254µs 9.596µs 55.667µs 100 95 37 39 partials/announcement.html 299.457µs 7.678µs 42.041µs 100 95 37 39 partials/gtm-noscript.html 227.249µs 113.624µs 149.916µs 0 0 0 2 shortcodes/tabs.html 222.375µs 111.187µs 185.25µs 98 0 0 2 partials/social-share.html 208.71µs 26.088µs 100.084µs 0 0 0 8 shortcodes/notice.html 176.208µs 88.104µs 129.083µs 0 0 0 2 _internal/shortcodes/youtube.html 175.376µs 87.688µs 160.917µs 100 0 0 2 partials/components/pagination.html 162.583µs 27.097µs 82.083µs 0 0 0 6 shortcodes/accordion.html 140.167µs 70.083µs 113.417µs 0 0 0 2 _default/_markup/render-table.html 133.163µs 3.414µs 46.625µs 100 95 37 39 partials/gtm.html 127.708µs 63.854µs 118.25µs 0 0 0 2 partials/manifest.html 118.792µs 59.396µs 89.667µs 97 0 0 2 partials/widgets/tags.html 118.042µs 59.021µs 95.792µs 0 0 0 2 shortcodes/button.html 115.292µs 38.43µs 92.084µs 0 0 0 3 _internal/alias.html 114.875µs 57.437µs 98.458µs 0 0 0 2 shortcodes/video.html 113.251µs 56.625µs 85.834µs 96 0 0 2 partials/widgets/categories.html 110.041µs 18.34µs 80.958µs 0 0 0 6 shortcodes/tab.html 110µs 55µs 96.75µs 0 0 0 2 _default/_markup/render-codeblock-mermaid.html 86.041µs 43.02µs 70.833µs 81 0 0 2 partials/toc.html 76.917µs 38.458µs 72.167µs 100 0 0 2 partials/pwa.html 74.709µs 37.354µs 66.75µs 0 0 0 2 shortcodes/toc.html 70.459µs 35.229µs 66.459µs 100 0 0 2 partials/cookie-consent.html 70.083µs 35.041µs 66.708µs 100 0 0 2 partials/adsense-script.html 69.666µs 1.786µs 23.5µs 100 95 37 39 partials/custom-script.html 62.749µs 31.374µs 59.416µs 100 0 0 2 partials/announcement-script.html 62.584µs 62.584µs 62.584µs 0 0 0 1 _internal/_default/sitemapindex.xml 59.669µs 1.612µs 23.542µs 100 100 37 37 partials/manifest 35.458µs 35.458µs 35.458µs 0 0 0 1 /css/style-lazy.css 10.208µs 10.208µs 10.208µs 0 0 0 1 /css/style.css | ZH | EN -------------------+----+----- Pages | 36 | 36 Paginator pages | 0 | 0 Non-page files | 0 | 0 Static files | 2 | 2 Processed images | 48 | 0 Aliases | 2 | 1 Cleaned | 4 | 4 Total in 1052 ms 将 public 文件夹下所有内容通过 ftp 或者宝塔面板，上传到云服务器建立的 HTML 网站根目录即可。 "}]